[{"C:\\Users\\aring\\workspace\\csharp\\Fullstack-Capstone\\Monster Tracker\\client\\src\\index.js":"1","C:\\Users\\aring\\workspace\\csharp\\Fullstack-Capstone\\Monster Tracker\\client\\src\\reportWebVitals.js":"2","C:\\Users\\aring\\workspace\\csharp\\Fullstack-Capstone\\Monster Tracker\\client\\src\\App.js":"3","C:\\Users\\aring\\workspace\\csharp\\Fullstack-Capstone\\Monster Tracker\\client\\src\\components\\ApplicationViews.js":"4","C:\\Users\\aring\\workspace\\csharp\\Fullstack-Capstone\\Monster Tracker\\client\\src\\components\\AppHeader.js":"5","C:\\Users\\aring\\workspace\\csharp\\Fullstack-Capstone\\Monster Tracker\\client\\src\\providers\\UserProvider.js":"6","C:\\Users\\aring\\workspace\\csharp\\Fullstack-Capstone\\Monster Tracker\\client\\src\\pages\\Login.js":"7","C:\\Users\\aring\\workspace\\csharp\\Fullstack-Capstone\\Monster Tracker\\client\\src\\pages\\Register.js":"8","C:\\Users\\aring\\workspace\\csharp\\Fullstack-Capstone\\Monster Tracker\\client\\src\\pages\\Home.js":"9","C:\\Users\\aring\\workspace\\csharp\\Fullstack-Capstone\\Monster Tracker\\client\\src\\pages\\Monsters.js":"10","C:\\Users\\aring\\workspace\\csharp\\Fullstack-Capstone\\Monster Tracker\\client\\src\\components\\MonserCard.js":"11","C:\\Users\\aring\\workspace\\csharp\\Fullstack-Capstone\\Monster Tracker\\client\\src\\pages\\MonsterDetails.js":"12","C:\\Users\\aring\\workspace\\csharp\\Fullstack-Capstone\\Monster Tracker\\client\\src\\components\\abilitySection.js":"13","C:\\Users\\aring\\workspace\\csharp\\Fullstack-Capstone\\Monster Tracker\\client\\src\\components\\AbilitySection.js":"14","C:\\Users\\aring\\workspace\\csharp\\Fullstack-Capstone\\Monster Tracker\\client\\src\\pages\\NewEncounter.js":"15","C:\\Users\\aring\\workspace\\csharp\\Fullstack-Capstone\\Monster Tracker\\client\\src\\components\\FavoriteMonsters.js":"16","C:\\Users\\aring\\workspace\\csharp\\Fullstack-Capstone\\Monster Tracker\\client\\src\\components\\SavedEncounters.js":"17","C:\\Users\\aring\\workspace\\csharp\\Fullstack-Capstone\\Monster Tracker\\client\\src\\components\\EncounterCard.js":"18","C:\\Users\\aring\\workspace\\csharp\\Fullstack-Capstone\\Monster Tracker\\client\\src\\pages\\EncounterDetails.js":"19","C:\\Users\\aring\\workspace\\csharp\\Fullstack-Capstone\\Monster Tracker\\client\\src\\pages\\EncounterEdit.js":"20"},{"size":695,"mtime":1612215329677,"results":"21","hashOfConfig":"22"},{"size":362,"mtime":499162500000,"results":"23","hashOfConfig":"22"},{"size":717,"mtime":1612212925307,"results":"24","hashOfConfig":"22"},{"size":1993,"mtime":1612985078518,"results":"25","hashOfConfig":"22"},{"size":3390,"mtime":1612906808859,"results":"26","hashOfConfig":"22"},{"size":3203,"mtime":1612232849175,"results":"27","hashOfConfig":"22"},{"size":2657,"mtime":1612298988497,"results":"28","hashOfConfig":"22"},{"size":3912,"mtime":1612233920182,"results":"29","hashOfConfig":"22"},{"size":712,"mtime":1612996129689,"results":"30","hashOfConfig":"22"},{"size":2301,"mtime":1612891631071,"results":"31","hashOfConfig":"22"},{"size":753,"mtime":1612904452378,"results":"32","hashOfConfig":"22"},{"size":8691,"mtime":1613063505773,"results":"33","hashOfConfig":"22"},{"size":306,"mtime":1613062980814,"results":"34","hashOfConfig":"22"},{"size":306,"mtime":1613062980814,"results":"35","hashOfConfig":"22"},{"size":7757,"mtime":1612978174451,"results":"36","hashOfConfig":"22"},{"size":2212,"mtime":1612994115339,"results":"37","hashOfConfig":"22"},{"size":2268,"mtime":1612985764241,"results":"38","hashOfConfig":"22"},{"size":277,"mtime":1612995947291,"results":"39","hashOfConfig":"22"},{"size":1988,"mtime":1612997065240,"results":"40","hashOfConfig":"22"},{"size":10220,"mtime":1612993351313,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"1v5itzt",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"51","usedDeprecatedRules":"44"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"54","usedDeprecatedRules":"44"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"57","usedDeprecatedRules":"44"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"60","usedDeprecatedRules":"44"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"63","usedDeprecatedRules":"44"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"66","usedDeprecatedRules":"44"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"69","usedDeprecatedRules":"44"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"72","usedDeprecatedRules":"44"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":1,"source":"75","usedDeprecatedRules":"44"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"78","usedDeprecatedRules":"79"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"82","usedDeprecatedRules":"44"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":1,"source":"85","usedDeprecatedRules":"44"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"88","usedDeprecatedRules":"44"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"91","usedDeprecatedRules":"44"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"94"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"97","usedDeprecatedRules":"44"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":1,"source":"100","usedDeprecatedRules":"44"},"C:\\Users\\aring\\workspace\\csharp\\Fullstack-Capstone\\Monster Tracker\\client\\src\\index.js",[],["101","102"],"C:\\Users\\aring\\workspace\\csharp\\Fullstack-Capstone\\Monster Tracker\\client\\src\\reportWebVitals.js",[],"C:\\Users\\aring\\workspace\\csharp\\Fullstack-Capstone\\Monster Tracker\\client\\src\\App.js",[],"C:\\Users\\aring\\workspace\\csharp\\Fullstack-Capstone\\Monster Tracker\\client\\src\\components\\ApplicationViews.js",["103","104","105","106"],"﻿import React, { useContext } from 'react';\r\nimport { Switch, Route, Redirect } from 'react-router-dom';\r\nimport {\r\n    UserContext,\r\n    UserProvider,\r\n} from '../providers/UserProvider';\r\nimport Login from '../pages/Login';\r\nimport Register from '../pages/Register';\r\nimport Home from '../pages/Home';\r\nimport Monsters from \"../pages/Monsters\";\r\nimport MonsterDetails from \"../pages/MonsterDetails\";\r\nimport NewEncounter from \"../pages/NewEncounter\";\r\nimport EncounterDetails from \"../pages/EncounterDetails\";\r\nimport EncounterEdit from \"../pages/EncounterEdit\";\r\n\r\nconst ApplicationViews = () => {\r\n    const { isLoggedIn } = useContext(UserContext);\r\n    const LoggedIn = () => {\r\n        if (isLoggedIn) {\r\n            return <Redirect to=\"/\"/>\r\n        } else {\r\n            return <Redirect to=\"/login\" />;\r\n        }\r\n    };\r\n    return (\r\n        <switch>\r\n            <Route path=\"/\" exact>\r\n                {isLoggedIn ? <Home /> : <Redirect to=\"/login\" />}\r\n            </Route>\r\n            <Route path=\"/Monsters\" exact>\r\n                {isLoggedIn ? <Monsters /> : <Redirect to=\"/login\" />}\r\n            </Route>\r\n            <Route path=\"/MonsterDetails/:monsterId\" render={(props) => (isLoggedIn ? (< MonsterDetails {...props} />) : (<Redirect to=\"/login\" />) )} />\r\n            <Route path=\"/login\">\r\n                <Login />\r\n            </Route>\r\n            <Route path=\"/register\">\r\n                <Register/>\r\n            </Route>\r\n            <Route path=\"/NewEncounter\" exact>\r\n                {isLoggedIn ? < NewEncounter /> : <Redirect to=\"/login\" />}\r\n            </Route>\r\n            <Route path=\"/EncounterDetails/:encounterId\" render={(props) => (isLoggedIn ? (<EncounterDetails {...props} />) : (<Redirect to=\"/login\" />))} />\r\n            <Route path=\"/EncounterEdit/:encounterId\" render={(props) => (isLoggedIn ? (<EncounterEdit {...props} />) : (<Redirect to=\"/login\" />))} />\r\n        </switch>\r\n            )\r\n\r\n};\r\n\r\nexport default ApplicationViews;","C:\\Users\\aring\\workspace\\csharp\\Fullstack-Capstone\\Monster Tracker\\client\\src\\components\\AppHeader.js",["107"],"﻿import React, { useState, useContext } from 'react';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { toast } from 'react-toastify';\r\nimport {\r\n    Collapse,\r\n    Navbar,\r\n    NavbarToggler,\r\n    NavbarBrand,\r\n    Nav,\r\n    NavItem,\r\n    NavLink,\r\n    NavbarText\r\n} from 'reactstrap';\r\nimport { UserContext } from '../providers/UserProvider';\r\n\r\nconst AppHeader = () => {\r\n    const { getCurrentUser, logout } = useContext(UserContext);\r\n    const user = getCurrentUser();\r\n    const history = useHistory();\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const toggle = () => setIsOpen(!isOpen);\r\n\r\n    const logoutAndReturn = () => {\r\n        return logout().then(() => {\r\n            toast.dark('You are now logged out');\r\n            history.push('/login');\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Navbar color=\"dark\" dark expand=\"md\">\r\n                <NavbarBrand tag={Link} to=\"/\">\r\n                    <img\r\n                        id=\"header-logo\"\r\n                        src=\"/MonsterTracker.jpg\"\r\n                        width=\"70\"\r\n                        height=\"70\"\r\n                        className=\"mr-1\"\r\n                        alt=\"Monster Tracker Logo\"\r\n                    />\r\n        </NavbarBrand>\r\n                <NavbarToggler onClick={toggle} />\r\n                <Collapse isOpen={isOpen} navbar>\r\n                    <Nav className=\"mr-auto\" navbar>\r\n                        {user ? (\r\n                            <>\r\n                                <NavItem>\r\n                                    <NavLink to=\"/Monsters\" tag={Link}>\r\n                                        <div>All Monsters</div>\r\n                                    </NavLink>\r\n                                </NavItem>\r\n                                <NavItem>\r\n                                    <NavLink to=\"/NewEncounter\" tag={Link}>\r\n                                        <div>New Encounter</div>\r\n                                    </NavLink>\r\n                                </NavItem>\r\n                                <NavItem>\r\n                                    <NavLink className=\"pointer\" onClick={logoutAndReturn}>\r\n                                        Logout\r\n                  </NavLink>\r\n                                </NavItem>\r\n                            </>\r\n                        ) : (\r\n                                <>\r\n                                    <NavItem>\r\n                                        <NavLink to=\"/login\" tag={Link}>\r\n                                            Login\r\n                                        </NavLink>\r\n                                    </NavItem>\r\n                                    <NavItem>\r\n                                        <NavLink to=\"/register\" tag={Link}>\r\n                                            Register\r\n                                        </NavLink>\r\n                                    </NavItem>\r\n                                </>\r\n                            )}\r\n                    </Nav>\r\n                    {user ? (\r\n                        <NavbarText className=\"d-sm-none d-md-block\">\r\n                            Welcome {user.displayName}\r\n                        </NavbarText>\r\n                    ) : null}\r\n                </Collapse>\r\n            </Navbar>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AppHeader;","C:\\Users\\aring\\workspace\\csharp\\Fullstack-Capstone\\Monster Tracker\\client\\src\\providers\\UserProvider.js",["108"],"﻿import React, { useState, useEffect, createContext } from \"react\";\r\nimport { Spinner } from \"reactstrap\";\r\nimport firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\n\r\nexport const UserContext = createContext();\r\n\r\nexport function UserProvider(props) {\r\n    const apiUrl = \"/api/user\";\r\n    const [users, setUser] = useState([]);\r\n    const user = localStorage.getItem(\"user\");\r\n    const [isLoggedIn, setIsLoggedIn] = useState(user != null);\r\n    const [isFirebaseReady, setIsFirebaseReady] = useState(false);\r\n    useEffect(() => {\r\n        firebase.auth().onAuthStateChanged((u) => {\r\n            setIsFirebaseReady(true);\r\n        });\r\n    }, []);\r\n\r\n    const logIn = (email, pw) => {\r\n        return firebase.auth().signInWithEmailAndPassword(email, pw)\r\n            .then((signInResponse) => getUserProfile(signInResponse.user.uid))\r\n            .then((user) => {\r\n                console.log(user)\r\n                    localStorage.setItem(\"user\", JSON.stringify(user));\r\n                    setIsLoggedIn(true);\r\n                    return user;\r\n            });\r\n    };\r\n\r\n    const logout = () => {\r\n        return firebase.auth().signOut().then(() => {\r\n            localStorage.clear();\r\n            setIsLoggedIn(false);\r\n        });\r\n    };\r\n\r\n    const register = (user, password) => {\r\n        return firebase.auth()\r\n            .createUserWithEmailAndPassword(user.email, password)\r\n            .then((createResponse) =>\r\n                saveUser({ ...user, firebaseId: createResponse.user.uid })\r\n            ).then((savedUser) => {\r\n                localStorage.setItem(\"user\", JSON.stringify(savedUser));\r\n                setIsLoggedIn(true);\r\n                return savedUser;\r\n            });\r\n    };\r\n\r\n    const getToken = () => firebase.auth().currentUser.getIdToken();\r\n\r\n    const getUserProfile = (firebaseUserId) => {\r\n        return getToken().then((token) =>\r\n            fetch(`${apiUrl}/${firebaseUserId}`, {\r\n                method: \"GET\",\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`,\r\n                },\r\n            }).then((resp) => resp.json())\r\n        );\r\n    };\r\n\r\n    const saveUser = (user) => {\r\n        return getToken().then((token) =>\r\n            fetch(apiUrl, {\r\n                method: \"POST\",\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`,\r\n                    \"Content-Type\": \"application/json\",\r\n                },\r\n                body: JSON.stringify(user),\r\n            }).then((resp) => resp.json())\r\n        );\r\n    };\r\n\r\n    const getCurrentUser = () => {\r\n        const user = localStorage.getItem(\"user\");\r\n        if (!user) {\r\n            return null;\r\n        }\r\n        return JSON.parse(user);\r\n    };\r\n\r\n    return (\r\n        <UserContext.Provider\r\n            value={{\r\n                isLoggedIn,\r\n                logIn,\r\n                logout,\r\n                register,\r\n                getToken,\r\n                getCurrentUser,\r\n                users,\r\n                setUser\r\n            }}>\r\n            {isFirebaseReady ? (props.children) : (<Spinner className=\"app-spinner dark\" />\r\n            )}\r\n        </UserContext.Provider>\r\n    );\r\n}","C:\\Users\\aring\\workspace\\csharp\\Fullstack-Capstone\\Monster Tracker\\client\\src\\pages\\Login.js",["109"],"﻿import React, { useContext, useState } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Button, Input } from \"reactstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { UserContext } from \"../providers/UserProvider\";\r\nimport \"./Login.css\"\r\n\r\nconst Login = () => {\r\n    const { logIn } = useContext(UserContext);\r\n    const [loading, setLoading] = useState(false);\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const history = useHistory();\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        setLoading(true);\r\n        logIn(email, password)\r\n            .then((user) => {\r\n                setLoading(false);\r\n                toast.info(`Welcome back ${user.userName}`);\r\n                history.push(\"/\");\r\n            })\r\n            .catch((err) => {\r\n                setLoading(false);\r\n                toast.error(\"Invalid email or password\");\r\n            });\r\n    };\r\n\r\n    return (\r\n        <div className=\"login-form\">\r\n            <form onSubmit={handleSubmit}>\r\n                <h2 className=\"text-center text-light\">User Login</h2>\r\n                <div className=\"center-div\">\r\n                <div className=\"form-group small-div\">\r\n                    <Input\r\n                        onChange={(e) => setEmail(e.target.value)}\r\n                        type=\"email\"\r\n                        className=\"form-control\"\r\n                        name=\"email\"\r\n                        placeholder=\"Email\"\r\n                        required=\"required\"\r\n                    />\r\n                </div>\r\n                <div className=\"form-group small-div\">\r\n                    <Input\r\n                        onChange={(e) => setPassword(e.target.value)}\r\n                        type=\"password\"\r\n                        className=\"form-control\"\r\n                        name=\"password\"\r\n                        placeholder=\"Password\"\r\n                        required=\"required\"\r\n                    />\r\n                </div>\r\n                <div className=\"form-group small-div\">\r\n                    <Button type=\"submit\" block color=\"danger\" disabled={loading}>\r\n                        Sign in\r\n          </Button>\r\n                    </div>\r\n    </div>\r\n                <div className=\"text-center small text-light\">\r\n                    Don't have an account?\r\n          <div>\r\n                        <Link to=\"/register\" className=\"text-info\">Sign up here</Link>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Login;","C:\\Users\\aring\\workspace\\csharp\\Fullstack-Capstone\\Monster Tracker\\client\\src\\pages\\Register.js",["110"],"﻿import React, { useContext, useState } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Button, Input } from \"reactstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { UserContext } from \"../providers/UserProvider\";\r\nimport \"./Login.css\";\r\n\r\nconst Register = () => {\r\n    const { register } = useContext(UserContext);\r\n    const [loading, setLoading] = useState(false);\r\n    const [userName, setDisplayName] = useState(\"\");\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [confirm, setConfirm] = useState(\"\");\r\n    const history = useHistory();\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (password !== confirm) {\r\n            toast.error(\"Passwords do not match\");\r\n            return;\r\n        }\r\n        setLoading(true);\r\n        const profile = {\r\n            userName,\r\n            email\r\n        };\r\n        register(profile, password).then((user) => {\r\n            setLoading(false);\r\n            toast.info(`Welcom ${user.displayName}`);\r\n            history.push(\"/\");\r\n        })\r\n            .catch((err) => {\r\n                setLoading(false);\r\n                toast.error(\"Invalid email\");\r\n            });\r\n    };\r\n\r\n    return (\r\n        <div className=\"login-form\">\r\n            <form onSubmit={handleSubmit}>\r\n                <h2 className=\"text-center text-light\">User Register</h2>\r\n                <div className=\"form-group\">\r\n                </div>\r\n                <div className=\"center-div\">\r\n                <div className=\"form-group small-div\">\r\n                    <Input\r\n                        onChange={(e) => setDisplayName(e.target.value)}\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        name=\"displayName\"\r\n                        placeholder=\"Display Name\"\r\n                        required=\"required\"\r\n                    />\r\n                </div>\r\n                    <div className=\"form-group small-div\">\r\n                    <Input\r\n                        onChange={(e) => setEmail(e.target.value)}\r\n                        type=\"email\"\r\n                        className=\"form-control\"\r\n                        name=\"email\"\r\n                        placeholder=\"Email\"\r\n                        required=\"required\"\r\n                    />\r\n                </div>\r\n                    <div className=\"form-group small-div\">\r\n                    <Input\r\n                        onChange={(e) => setPassword(e.target.value)}\r\n                        type=\"password\"\r\n                        className=\"form-control\"\r\n                        name=\"password\"\r\n                        placeholder=\"Password\"\r\n                        required=\"required\"\r\n                    />\r\n                </div>\r\n                    <div className=\"form-group small-div\">\r\n                    <Input\r\n                        onChange={(e) => setConfirm(e.target.value)}\r\n                        type=\"password\"\r\n                        className=\"form-control\"\r\n                        name=\"confirmPassword\"\r\n                        placeholder=\"Confirm Password\"\r\n                        required=\"required\"\r\n                    />\r\n                </div>\r\n                    <div className=\"form-group small-div\">\r\n                    <Button type=\"submit\" block color=\"danger\" disabled={loading}>\r\n                            Sign Up\r\n          </Button>\r\n                    </div>\r\n                </div>\r\n                <div className=\"text-center small text-light\">\r\n                    Already have an account?\r\n          <div>\r\n                        <Link to=\"/login\" className=\"text-light\">Log in here</Link>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Register;","C:\\Users\\aring\\workspace\\csharp\\Fullstack-Capstone\\Monster Tracker\\client\\src\\pages\\Home.js",["111"],"﻿import FavoriteMonsters from \"../components/FavoriteMonsters\";\r\nimport SavedEncounters from \"../components/SavedEncounters\";\r\nimport \"./Home.css\";\r\nconst Home = () => {\r\n    return (\r\n        <div className=\"contianer-fluid\">\r\n            <div className=\"row\">\r\n                <div className=\"div-favorite col\">\r\n                    <h3>Favorite Monsters</h3>\r\n                    <FavoriteMonsters  />\r\n                </div>\r\n                <div className=\"col-1\"></div>\r\n                <div className=\"div-saved col\">\r\n                    <h3>Saved Encounters</h3>\r\n                    <SavedEncounters/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        );\r\n}\r\n\r\nexport default Home;","C:\\Users\\aring\\workspace\\csharp\\Fullstack-Capstone\\Monster Tracker\\client\\src\\pages\\Monsters.js",["112","113"],"﻿import React, { useState, useContext, useEffect } from \"react\";\r\nimport { UserContext } from \"../providers/UserProvider\";\r\nimport MonsterCard from \"../components/MonserCard\";\r\nimport \"./Monster.css\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nexport const Monsters = () => {\r\n    const history = useHistory();\r\n    const apiUrl = \"/api/monster\";\r\n    const { getToken } = useContext(UserContext);\r\n    const [monsters, setMonsters] = useState([]);\r\n\r\n    useEffect(() => {\r\n        getToken().then((token)=>\r\n        fetch(`${apiUrl}`, {\r\n            method: \"GET\",\r\n            headers: {\r\n                Authorization:`Bearer ${token}`,\r\n            },\r\n        })).then((res) => res.json())\r\n            .then((monsters) => {\r\n                setMonsters(monsters);\r\n            });\r\n    }, []);\r\n\r\n    const details=(id)=> {\r\n        const location = {\r\n            pathname: `/MonsterDetails/${id}`,\r\n            state: { prevpath:`/Monsters`}\r\n        }\r\n\r\n        history.push(location)\r\n    }\r\n\r\n    const favorite = (id) => {\r\n        const user = JSON.parse(localStorage.getItem('user'));\r\n        const favorite = {\r\n            userId: user.id,\r\n            monsterId:id\r\n        }\r\n        getToken().then((token) =>\r\n            fetch(\"/api/favorite\", {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                    Authorization:`Bearer ${token}`,\r\n                },\r\n                body: JSON.stringify(favorite),\r\n            })\r\n        )\r\n        toast.success(\"Monster added to favorite\")\r\n\r\n    }\r\n    return (\r\n        <div className=\"Container-fluid\">\r\n            <div className=\"row\">\r\n                {monsters.map((monster) => (\r\n                    <div className=\"col-3 div-background\">\r\n                        <MonsterCard Monster={monster} />\r\n                        <button type=\"button\" className=\"btn btn-info\" onClick={() => { details(monster.id) }}>Details</button>\r\n                        <button type=\"button\" className=\"btn btn-success\" onClick={() => { favorite(monster.id) }}>Add to Favorite</button>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Monsters;","C:\\Users\\aring\\workspace\\csharp\\Fullstack-Capstone\\Monster Tracker\\client\\src\\components\\MonserCard.js",["114","115"],"﻿import React from \"react\";\r\nimport \"./MonsterCard.css\";\r\n\r\nconst MonsterCard = ({ Monster }) => {\r\n    return (\r\n        <div>\r\n            <img className=\"card-image\" src={Monster.image} alt=\"Monster image\" />\r\n            <div>\r\n                <h4>{Monster.name}</h4>\r\n                {Monster.subType !== null ? (<h6>{Monster.size} {Monster.type} ({Monster.subType}), {Monster.alignment}</h6>) : (<h6>{Monster.size} {Monster.type}, {Monster.alignment}</h6>)}\r\n                <p> HP:{Monster.hp} AC:{Monster.ac} CR:{Monster.cr} </p>\r\n                <p> STR:{Monster.str} DEX:{Monster.dex} CON:{Monster.con} INT:{Monster.int} WIS:{Monster.wis} CHA:{Monster.cha}</p>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MonsterCard;","C:\\Users\\aring\\workspace\\csharp\\Fullstack-Capstone\\Monster Tracker\\client\\src\\pages\\MonsterDetails.js",["116","117","118","119","120","121","122","123","124"],"﻿import { useEffect, useContext,useState } from \"react\";\r\nimport React from \"react\";\r\nimport { UserContext } from \"../providers/UserProvider\";\r\nimport { useHistory,useParams } from \"react-router-dom\";\r\nimport AbilitySection from \"../components/AbilitySection\";\r\nimport \"./monsterDetails.css\"\r\n\r\n\r\nexport const MonsterDetails = (props) => {\r\n    const { getToken } = useContext(UserContext);\r\n    const [monsterDetails, setMonsterDetails] = useState({});\r\n    const [abilityTypes, setAbilityTypes] = useState([]);\r\n    const { monsterId } = useParams();\r\n    const monster = monsterDetails.monster;\r\n    const history = useHistory();\r\n    useEffect(() => {\r\n        getToken().then((token) =>\r\n            fetch(`/api/monster/${monsterId}`, {\r\n                method: \"GET\",\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`,\r\n                }\r\n            }))\r\n            .then((res) => res.json())\r\n            .then((monsterDetails) => {\r\n                setMonsterDetails(monsterDetails);\r\n            }).then();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        getAbilityTypeArray()\r\n    }, [monsterDetails]);\r\n    const getMoveString = () => {\r\n\r\n        let moveString = `Speed: ${monster.walk}ft.`\r\n        if (monster.fly != null) {\r\n            moveString += ` Fly: ${monster.fly}ft.`\r\n        }\r\n        if (monster.swim != null) {\r\n            moveString += ` Swim: ${monster.swim}ft.`\r\n        }\r\n        if (monster.burrow != null) {\r\n            moveString += ` Burrow: ${monster.burrow}`\r\n        }\r\n        return moveString\r\n    }\r\n    const getProf = () => {\r\n        let profString = ``\r\n        monsterDetails.proficiency.forEach(prof => profString += prof.profName + \": +\" + prof.value+\" \")\r\n        return profString\r\n    }\r\n    const getSense = () => {\r\n        let senseString = \"Senses: \";\r\n        monsterDetails.senses.forEach(sense => {\r\n            if (sense.senseName == \"Passive Perception\") {\r\n                senseString += sense.senseName +\" \"+ sense.value+\" \";\r\n            } else { senseString += sense.senseName +\" \"+ sense.value + \"ft. \" }\r\n        })\r\n        return senseString;\r\n    }\r\n\r\n    const getAbilityTypeArray = () => {\r\n        const typeArray = new Array();\r\n        monster!=null?(\r\n        monsterDetails.abilities.map((ability) => {\r\n            typeArray.push(ability.type)\r\n        })):(<></>)\r\n        setAbilityTypes(typeArray);\r\n    }\r\n\r\n    \r\n\r\n    console.log(monsterDetails)\r\n    console.log(abilityTypes)\r\n    return (\r\n        monsterDetails.monster != null ? (\r\n            <div className=\"container\">\r\n                <div className=\"row div-bg\">\r\n                    <div className=\"col-xl-4 col-md-10 offset-md-1\">\r\n                        <img className=\"image\" src={monster.image} />\r\n                    </div>\r\n                    <div className=\"col-xl-6 col-md-10 offset-md-1\">\r\n                        <h1>{monster.name}</h1>\r\n                        {monster.subType != null ? (<h3 >{monster.size} {monster.type} ({monster.subType}), {monster.alignment}</h3>) : (<h3>{monster.size} {monster.type}, {monster.alignment}</h3>)}\r\n                        <hr className=\"hr-color\" />\r\n                        <p> Armor Class: {monster.ac}( {monster.armorList})</p>\r\n                        <p> Hit points: {monster.hp} ({monster.hitDice})</p>\r\n                        <p>{getMoveString()}</p>\r\n                        <hr className=\"hr-color\" />\r\n                        <p>STR: {monster.str}({Math.floor((monster.str - 10) / 2)}) DEX: {monster.dex}({Math.floor((monster.dex - 10) / 2)}) CON: {monster.con}({Math.floor((monster.con - 10) / 2)}) INT: {monster.int}({Math.floor((monster.int - 10) / 2)}) WIS: {monster.wis}({Math.floor((monster.wis - 10) / 2)}) CHA: {monster.cha}({Math.floor((monster.cha - 10) / 2)})</p>\r\n                        \r\n                    </div>\r\n                    <div>\r\n                        <hr className=\"hr-color\" />\r\n                        <p>{getProf()}</p>\r\n                        {monster.vulnerabilities != null ? (<p>Damage Vulnerabilities: {monster.vulnerabilities}</p>) : (<p></p>)}\r\n                        {monster.resistances != null ? (<p>Damage Resistances: {monster.resistances}</p>) : (<p></p>)}\r\n                        {monster.damageImmunities != null ? (<p>Damage Immunities: {monster.damageImmunities}</p>) : (<p></p>)}\r\n                        {monster.conditionImmunities != null ? (<p>Condition Immunities: {monster.conditionImmunities}</p>) : (<p></p>)}\r\n                        <p>{getSense()}</p>\r\n                        <p>Languages: {monster.languages}</p>\r\n                        <p>Challenge: {monster.cr} ({monster.xp}XP)</p>\r\n                        {abilityTypes.includes(\"Ability\") ? (<div>\r\n                            <hr className=\"hr-color\" />\r\n                            {monsterDetails.abilities.map((ability) => (\r\n                                <AbilitySection ability={ability} type={\"Ability\"} />\r\n                            ))}\r\n                        </div>) : (<></>)}\r\n                        {monster.spellList!=null?(monster.spellList.split(\"@\").map((spell) => (\r\n                            <AbilitySection ability={spell} type={null} />\r\n                        ))) : (<></>)}\r\n\r\n                        {abilityTypes.includes(\"Action\") ? (\r\n                            <div>\r\n                                <h3>Actions</h3>\r\n                                <hr className=\"hr-color\"/>\r\n                            {\r\n                                monsterDetails.abilities.map((ability) => (\r\n                                    <AbilitySection ability={ability} type=\"Action\" />\r\n                                ))\r\n                                }\r\n                        </div>\r\n                        ) : (<></>)}\r\n\r\n                        {abilityTypes.includes(\"Reaction\") ? (\r\n                            <div>\r\n                                <h3>Reactions</h3>\r\n                                <hr className=\"hr-color\" />\r\n                                {\r\n                                    monsterDetails.abilities.map((ability) => (\r\n                                        <AbilitySection ability={ability} type=\"Reaction\" />\r\n                                    ))\r\n                                }\r\n                            </div>\r\n                        ) : (<></>)}\r\n\r\n                        {abilityTypes.includes(\"Legendary Action\") ? (\r\n                            <div>\r\n                                <h3>Legendary Actions</h3>\r\n                                <hr className=\"hr-color\" />\r\n                                <p>The {monsterDetails.monster.name} can take 3 Legendary Actions, choosing from the options below. Only one legendary action can be used at a time, and only at the end of another creature's turn. The {monsterDetails.monster.name} regains spent legendary Actions at the start of its turn.</p>\r\n                                {\r\n                                    monsterDetails.abilities.map((ability) => (\r\n                                        <AbilitySection ability={ability} type=\"Legendary Action\" />\r\n                                    ))\r\n                                }\r\n                            </div>\r\n                        ) : (<></>)}\r\n               \r\n                        {monsterDetails.abilities.map((ability) => {\r\n                            if (ability.type == \"Lair Actions\") {\r\n                                return (\r\n                                    <div>\r\n                                        <h3>Lair Action</h3>\r\n                                        <hr className=\"hr-color\" />\r\n                                        <p>On initiative count 20 (losing initiative ties) the {monsterDetails.monster.name} can take a lair action to cause one of the following magical effects: the {monsterDetails.monster.name} can't use the same effect two rounds in a row:</p>\r\n                                        {\r\n                                            ability.description.split(\"-\").map((LA) => (\r\n                                            \r\n                                            <AbilitySection ability={LA} type={ null}/>\r\n                                        ))}\r\n                                    </div>\r\n                                    )\r\n                            }\r\n                        })}\r\n\r\n                    </div>\r\n                </div>\r\n                <p className=\"btn btn-info\" onClick={() => { history.goBack() }}>Go Back</p>\r\n            </div>\r\n                ) : (<div>\r\n            </div>)\r\n    );\r\n\r\n};\r\n\r\nexport default MonsterDetails;","C:\\Users\\aring\\workspace\\csharp\\Fullstack-Capstone\\Monster Tracker\\client\\src\\components\\abilitySection.js",["125","126"],"﻿import React from \"react\";\r\n\r\nconst abilitySection = ({ ability, type }) => {\r\n\r\n    return (\r\n        type == null ? (<p>{ability}</p>) :\r\n            (ability.type == type ? (<p>{ability.name}: {ability.description}</p>):(<></>))\r\n    );\r\n};\r\n\r\nexport default abilitySection;",["127","128"],"C:\\Users\\aring\\workspace\\csharp\\Fullstack-Capstone\\Monster Tracker\\client\\src\\components\\AbilitySection.js",["129","130"],"﻿import React from \"react\";\r\n\r\nconst abilitySection = ({ ability, type }) => {\r\n    console.log(ability)\r\n    return (\r\n        type == null ? (<p>{ability}</p>) :\r\n            (ability.type == type ? (<p>{ability.name}: {ability.description}</p>) : (<></>))\r\n    );\r\n};\r\n\r\nexport default abilitySection;","C:\\Users\\aring\\workspace\\csharp\\Fullstack-Capstone\\Monster Tracker\\client\\src\\pages\\NewEncounter.js",["131","132","133","134","135","136","137","138"],"﻿import React, { useEffect, useState, useContext } from \"react\";\r\nimport { UserContext } from \"../providers/UserProvider\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport MonsterCard from \"../components/MonserCard\";\r\nimport \"./NewEncounter.css\"\r\nimport { toast } from \"react-toastify\";\r\n\r\n\r\nconst NewEncounter = () => {\r\n    \r\n    const { getToken } = useContext(UserContext);\r\n    const history = useHistory();\r\n    const apiUrl = \"/api/monster\";\r\n    const [allMonsters, setAllMonsters] = useState([]);\r\n    const [addedMonsters, setAddedMonsters] = useState([]);\r\n    const [encounter, setEncounter] = useState({});\r\n    const [monsterId, setMonsterId] = useState(0);\r\n    const [favoriteMonsters, setFavoriteMonsters] = useState([]);\r\n    \r\n    useEffect(() => {\r\n        getToken().then((token) =>\r\n            fetch(`${apiUrl}`, {\r\n                method: \"GET\",\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`,\r\n                },\r\n            })).then((res) => res.json())\r\n            .then((monsters) => {\r\n                setAllMonsters(monsters);\r\n            });\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const user = JSON.parse(localStorage.getItem('user'));\r\n        getToken().then((token) =>\r\n            fetch(`/api/favorite/${user.id}`, {\r\n                method: \"GET\",\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`,\r\n                },\r\n            })).then((res) => res.json())\r\n            .then((favoriteMonster) => {\r\n                setFavoriteMonsters(favoriteMonster);\r\n            });\r\n    }, []);\r\n\r\n    const handleInputChange = (e) => {\r\n        encounter[e.target.id] = e.target.value\r\n        setEncounter(encounter);\r\n    }\r\n\r\n    const details=(id) =>{\r\n        const location = {\r\n            pathname: `/MonsterDetails/${id}`,\r\n            state: { prevpath: `/NewEncounter` }\r\n        }\r\n\r\n        history.push(location)\r\n    }\r\n\r\n    const removeMonster = (monsterId) => {\r\n        const copyArray = new Array();\r\n        addedMonsters.forEach((currentMonsterObj) => {\r\n            monsterId!= currentMonsterObj.id ? (\r\n                copyArray.push(currentMonsterObj)) : (<></>)\r\n        })\r\n        setAddedMonsters(copyArray)\r\n\r\n    }\r\n\r\n    const handleSubmit = () => {\r\n        const user = JSON.parse(localStorage.getItem('user'));\r\n        const encounterObj = {\r\n            userId: user.id,\r\n            name :encounter.title,\r\n            description : encounter.description\r\n        };\r\n        getToken().then((token) => \r\n            fetch(\"api/encounter\", {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                    Authorization: `Bearer ${token}`,\r\n                },\r\n                body: JSON.stringify(encounterObj),\r\n            }).then((res) => res.json())\r\n                .then((resInt) => {\r\n                    console.log(addedMonsters)\r\n                    addedMonsters.forEach((monsterObj) => {\r\n                        const EMObject =\r\n                        {\r\n                            encounterId: resInt,\r\n                            monsterId: monsterObj.Monster.id\r\n                        }\r\n                            fetch(\"api/encounterMonster\", {\r\n                                method: \"POST\",\r\n                                headers: {\r\n                                    \"Content-Type\": \"application/json\",\r\n                                    Authorization: `Bearer ${token}`,\r\n                                },\r\n                                body: JSON.stringify(EMObject),\r\n                            })\r\n                    })\r\n                })\r\n        ).then(history.push(\"/\"))\r\n    }\r\n   \r\n    return (\r\n        <section className=\"form-container\">\r\n            <div className=\"form-area\">\r\n                <form>\r\n                    <fieldset>\r\n                        <div className=\"div-style\">\r\n                            <div>Encounter Title</div>\r\n                            <div>\r\n                                <input className=\"newTitle\" type=\"text\" id=\"title\" onChange={handleInputChange} />\r\n                            </div>\r\n                        </div>\r\n                    </fieldset>\r\n                    <fieldset>\r\n                        <div>\r\n                            Encounter Description\r\n                        </div>\r\n                        <div>\r\n                            <textarea className=\"newBody\"id=\"description\" onChange={handleInputChange} />\r\n                        </div>\r\n                    </fieldset>\r\n                    <hr className=\"hr-color\" />\r\n                    <div className=\"container scroll\">\r\n                        <div className=\"row\">\r\n                        {addedMonsters.map((monsterObj) => (\r\n                            <div className=\"col-3 monster-card\">\r\n                                <MonsterCard Monster={monsterObj.Monster} />\r\n                                <p className=\"btn btn-danger\" onClick={() => { removeMonster(monsterObj.id) }} >Remove</p>\r\n                            </div>\r\n                        ))}\r\n                        </div>\r\n                    </div>\r\n                    <hr className=\"hr-color\" />\r\n                    <div className=\"container scroll\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">Favorite Monsters</div>\r\n\r\n                            {favoriteMonsters.map((monster) => (\r\n                                <div className=\"col-3 monster-card\">\r\n                                    <MonsterCard Monster={monster.monsterObject} />\r\n                                    <p className=\"btn btn-info\" onClick={() => { details(monster.monsterObject.id) }}>Details</p>\r\n                                    <p className=\"btn btn-success\" onClick={() => {\r\n                                        const monsterObj = { id: monsterId, Monster: monster.monsterObject };\r\n                                        const newId = monsterId + 1;\r\n                                        setMonsterId(newId);\r\n                                        setAddedMonsters([...addedMonsters, monsterObj])\r\n                                    }}>Add to Encounter</p>\r\n                                </div>\r\n                            ))}\r\n                            <div className=\"col-12\">All Monsters</div>\r\n                        {allMonsters.map((monster) => (\r\n                            <div className=\"col-3 monster-card\">\r\n                                <MonsterCard Monster={monster} />\r\n                                <p className=\"btn btn-info\" onClick={() => { details(monster.id) }}>Details</p>\r\n                                <p className=\"btn btn-success\" onClick={() => {\r\n                                    const monsterObj = { id: monsterId, Monster: monster };\r\n                                    const newId = monsterId + 1;\r\n                                    setMonsterId(newId);\r\n                                    setAddedMonsters([...addedMonsters, monsterObj])\r\n                                }}>Add to Encounter</p>\r\n                            </div>\r\n                        ))}\r\n                        </div>\r\n\r\n                    </div>\r\n                    <hr className=\"hr-color\" />\r\n                    <p className=\"btn btn-success\" onClick={() => { encounter.title == undefined || encounter.description == undefined ? (toast.error(\"Name or description invalid\")) : (addedMonsters.length==0?(toast.error(\"No Monster, please add one.\")):(handleSubmit())) }}>Submit</p>\r\n                </form>\r\n            </div>\r\n        </section>\r\n    )\r\n};\r\n\r\nexport default NewEncounter;","C:\\Users\\aring\\workspace\\csharp\\Fullstack-Capstone\\Monster Tracker\\client\\src\\components\\FavoriteMonsters.js",["139","140"],"﻿import { UserContext } from \"../providers/UserProvider\";\r\nimport { useEffect, useState, useContext } from \"react\";\r\nimport MonsterCard from \"./MonserCard\";\r\nimport \"./favorite.css\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nexport const FavoriteMonsters = () => {\r\n    const { getToken } = useContext(UserContext);\r\n    const [favoriteMonsters, setFavoriteMonster] = useState([]);\r\n    const user = JSON.parse(localStorage.getItem('user'));\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        getFavorites()\r\n    }, []);\r\n\r\n    const getFavorites = () => {\r\n        getToken().then((token) =>\r\n            fetch(`/api/favorite/${user.id}`, {\r\n                method: \"GET\",\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`,\r\n                },\r\n            })).then((res) => res.json())\r\n            .then((monsters) => { setFavoriteMonster(monsters); });\r\n    }\r\n\r\n    const details = (id) => {\r\n        const location = {\r\n            pathname: `/MonsterDetails/${id}`,\r\n            state: { prevpath: `/Monsters` }\r\n        }\r\n\r\n        history.push(location)\r\n    }\r\n\r\n    const deleteFavorite = (id) => {\r\n        getToken().then((token) =>\r\n            fetch(`/api/favorite/${id}`, {\r\n                method: \"DELETE\",\r\n                headers:{\r\n                Authorization:`Bearer ${token}`,\r\n                },\r\n            })).then(getFavorites())\r\n\r\n    }\r\n    console.log(favoriteMonsters)\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                {favoriteMonsters.map((monster) => {\r\n                return (\r\n                    <div className=\"col-xl-2 col-md-10 div-background \">\r\n                        <MonsterCard Monster={monster.monsterObject} />\r\n                        <button type=\"button\" className=\"btn btn-info\" onClick={() => { details(monster.monsterObject.id) }}>Details</button>\r\n                        <button type=\"button\" className=\"btn btn-danger\" onClick={() => { deleteFavorite(monster.favoriteId) }}>Delete</button>\r\n                    </div>\r\n                )\r\n            })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FavoriteMonsters;","C:\\Users\\aring\\workspace\\csharp\\Fullstack-Capstone\\Monster Tracker\\client\\src\\components\\SavedEncounters.js",["141","142"],"﻿import { UserContext } from \"../providers/UserProvider\";\r\nimport { useEffect, useState, useContext } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport EncounterCard from \"./EncounterCard\";\r\nimport \"./favorite.css\";\r\n\r\nexport const SavedEncounters = () => {\r\n    const { getToken } = useContext(UserContext);\r\n    const [savedEncounters, setSavedEncounter] = useState([]);\r\n    const history = useHistory();\r\n    const user = JSON.parse(localStorage.getItem('user'));\r\n\r\n    useEffect(() => {\r\n        getSavedEncounters()\r\n    }, []);\r\n\r\n    const getSavedEncounters = () => {\r\n        getToken().then((token) =>\r\n            fetch(`/api/encounter/getByuser/${user.id}`, {\r\n                method: \"GET\",\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`,\r\n                },\r\n\r\n            })).then((res) => res.json())\r\n            .then((encounters) => { setSavedEncounter(encounters); });\r\n    }\r\n\r\n    const deleteEncounter = (id) => {\r\n        getToken().then((token) =>\r\n            fetch(`/api/encounter/${id}`, {\r\n                method: \"DELETE\",\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`,\r\n                },\r\n            })).then(getSavedEncounters())\r\n    }\r\n\r\n    const details = (id) => {\r\n        const location = {\r\n            pathname: `/EncounterDetails/${id}`,\r\n            state: { prevpath: `/SavedEncounters` }\r\n        }\r\n\r\n        history.push(location)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {savedEncounters.map((encounter) => {\r\n                return (\r\n                    <div className=\"div-background\">\r\n                        <EncounterCard Encounter={encounter} />\r\n                        <button type=\"button\" className=\"btn btn-info\" onClick={() => { details(encounter.id) }}>Details</button>\r\n                        <button type=\"button\" className=\"btn btn-success\" onClick={() => { history.push(`/EncounterEdit/${encounter.id}`) }}>Edit</button>\r\n                        <button type=\"button\" className=\"btn btn-danger\" onClick={() => { deleteEncounter(encounter.id) }}>Delete</button>\r\n                    </div>\r\n                    )\r\n            })}\r\n        </div>\r\n        )\r\n}\r\n\r\nexport default SavedEncounters;","C:\\Users\\aring\\workspace\\csharp\\Fullstack-Capstone\\Monster Tracker\\client\\src\\components\\EncounterCard.js",["143"],"﻿\r\nimport \"./EncounterCard.css\"\r\nconst EncounterCard = ({ Encounter }) => {\r\n    return (\r\n        <div className=\"encounter-div\">\r\n            <h4>{Encounter.name}</h4>\r\n            <p>{Encounter.description }</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EncounterCard;","C:\\Users\\aring\\workspace\\csharp\\Fullstack-Capstone\\Monster Tracker\\client\\src\\pages\\EncounterDetails.js",["144","145","146"],"﻿import { useEffect, useContext, useState } from \"react\";\r\nimport React from \"react\";\r\nimport { UserContext } from \"../providers/UserProvider\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport MonsterCard from \"../components/MonserCard\";\r\n\r\nexport const EncounterDetails = (props) => {\r\n    const { getToken } = useContext(UserContext);\r\n    const [encounterDetails, setEncounterDetails] = useState({});\r\n    const [monsters, setMonsters] = useState([]);\r\n    const { encounterId } = useParams();\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        getToken().then((token) =>\r\n            fetch(`/api/encounter/${encounterId}`, {\r\n                method: \"GET\",\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`,\r\n                }\r\n            })).then((res) => res.json())\r\n            .then((encounter) => {\r\n                setEncounterDetails(encounter);\r\n            });\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        getToken().then((token) =>\r\n            fetch(`/api/encounterMonster/${encounterId}`, {\r\n                method: \"GET\",\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`,\r\n                }\r\n            })).then((res) => res.json())\r\n            .then((monsters) => {\r\n                setMonsters(monsters);\r\n            });\r\n    }, []);\r\n    console.log(monsters)\r\n    return (\r\n        <div className=\"div-background\">\r\n            <h1>{encounterDetails.name}</h1>\r\n            <p>{encounterDetails.description}</p>\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    {monsters.map((monster) => { return (<div className=\"card col-3\"><MonsterCard Monster={monster.monsterObject} /></div>) })}\r\n                </div>\r\n            </div>\r\n            <button type=\"button\" className=\"btn btn-info\" onClick={() => { history.goBack() }}>Back</button>\r\n        </div>\r\n        )\r\n}\r\n\r\nexport default EncounterDetails;","C:\\Users\\aring\\workspace\\csharp\\Fullstack-Capstone\\Monster Tracker\\client\\src\\pages\\EncounterEdit.js",["147","148","149","150","151","152","153","154","155","156","157","158","159","160"],"﻿import { useEffect, useContext, useState } from \"react\";\r\nimport React from \"react\";\r\nimport { UserContext } from \"../providers/UserProvider\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport { toast } from \"react-toastify\";\r\nimport MonsterCard from \"../components/MonserCard\";\r\n\r\nexport const EncounterEdit = (props) => {\r\n    const { getToken } = useContext(UserContext);\r\n    const history = useHistory();\r\n    const [allMonsters, setAllMonsters] = useState([]);\r\n    const [addedMonsters, setAddedMonsters] = useState([]);\r\n    const [encounter, setEncounter] = useState({});\r\n    const [monsterId, setMonsterId] = useState(0);\r\n    const [favoriteMonsters, setFavoriteMonsters] = useState([]);\r\n    const { encounterId } = useParams();\r\n    const [previousAddedMonsters, setPreviousAddedMonsters] = useState([]);\r\n    const [removedPreviousMonster, setRemovedPreviousMonster] = useState([]);\r\n    useEffect(() => {\r\n        getToken().then((token) =>\r\n            fetch(`/api/monster`, {\r\n                method: \"GET\",\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`,\r\n                },\r\n            })).then((res) => res.json())\r\n            .then((monsters) => {\r\n                setAllMonsters(monsters);\r\n            });\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const user = JSON.parse(localStorage.getItem('user'));\r\n        getToken().then((token) =>\r\n            fetch(`/api/favorite/${user.id}`, {\r\n                method: \"GET\",\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`,\r\n                },\r\n            })).then((res) => res.json())\r\n            .then((favoriteMonster) => {\r\n                setFavoriteMonsters(favoriteMonster);\r\n            });\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        getToken().then((token) =>\r\n            fetch(`/api/encounter/${encounterId}`, {\r\n                method: \"GET\",\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`,\r\n                },\r\n            })).then((res) => res.json())\r\n            .then((encounter) => { setEncounter(encounter) });\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        getToken().then((token) =>\r\n            fetch(`/api/encounterMonster/${encounterId}`, {\r\n                method: \"GET\",\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`,\r\n                },\r\n            })).then((res) => res.json())\r\n            .then((encounterMonster) => {\r\n                setPreviousAddedMonsters(encounterMonster);\r\n            });\r\n    }, [])\r\n\r\n    const handleInputChange = (e) => {\r\n        encounter[e.target.id] = e.target.value\r\n        setEncounter(encounter);\r\n    }\r\n\r\n    const details = (id) => {\r\n        const location = {\r\n            pathname: `/MonsterDetails/${id}`,\r\n            state: { prevpath: `/EncounterEdit` }\r\n        }\r\n\r\n        history.push(location)\r\n    }\r\n\r\n    const removeMonster = (monsterId) => {\r\n        const copyArray = new Array();\r\n        addedMonsters.forEach((currentMonsterObj) => {\r\n            monsterId != currentMonsterObj.id ? (\r\n                copyArray.push(currentMonsterObj)) : (<></>)\r\n        })\r\n        setAddedMonsters(copyArray);\r\n\r\n    }\r\n\r\n    const handleSubmit = () => {\r\n        const user = JSON.parse(localStorage.getItem('user'));\r\n        const encounterObj = {\r\n            Id:encounterId,\r\n            userId: user.id,\r\n            name: encounter.name,\r\n            description: encounter.description\r\n        };\r\n        getToken().then((token) =>\r\n            fetch(`api/encounter`, {\r\n                method: \"PUT\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                    Authorization: `Bearer ${token}`,\r\n                },\r\n                body: JSON.stringify(encounterObj),\r\n            })\r\n                .then(() => {\r\n                    addedMonsters.forEach((monsterObj) => {\r\n                        const EMObject =\r\n                        {\r\n                            encounterId: encounterId,\r\n                            monsterId: monsterObj.Monster.id\r\n                        }\r\n                        fetch(\"api/encounterMonster\", {\r\n                            method: \"POST\",\r\n                            headers: {\r\n                                \"Content-Type\": \"application/json\",\r\n                                Authorization: `Bearer ${token}`,\r\n                            },\r\n                            body: JSON.stringify(EMObject),\r\n                        })\r\n                    })\r\n                }).then(() => {\r\n                    console.log(removedPreviousMonster)\r\n                    removedPreviousMonster.map((monster) => {\r\n                        fetch(`api/encounterMonster/${monster}`, {\r\n                            method: \"DELETE\",\r\n                            headers: {\r\n                                Authorization: `Bearer ${token}`\r\n                            },\r\n                        });\r\n                    }\r\n                    )\r\n                })\r\n        ).then(history.push(\"/\"))\r\n    }\r\n\r\n    const removeFromEncounter = (monsterId) => {\r\n        const copyArray = new Array();\r\n        previousAddedMonsters.forEach((currentMonsterObj) => {\r\n            monsterId != currentMonsterObj.monsterEncounterId ? (\r\n                copyArray.push(currentMonsterObj)) : (<></>)\r\n        })\r\n        setPreviousAddedMonsters(copyArray);\r\n        setRemovedPreviousMonster([...removedPreviousMonster, monsterId])\r\n\r\n    }\r\n    console.log(encounter)\r\n    return (\r\n        <section className=\"form-container\">\r\n            <div className=\"form-area\">\r\n                <form>\r\n                    <fieldset>\r\n                        <div className=\"div-style\">\r\n                            <div>Encounter Title</div>\r\n                            <div>\r\n                                <input className=\"newTitle\" type=\"text\" id=\"name\" onChange={handleInputChange} defaultValue={encounter.name} />\r\n                            </div>\r\n                        </div>\r\n                    </fieldset>\r\n                    <fieldset>\r\n                        <div>\r\n                            Encounter Description\r\n                        </div>\r\n                        <div>\r\n                            <textarea className=\"newBody\" id=\"description\" onChange={handleInputChange} defaultValue={encounter.description} />\r\n                        </div>\r\n                    </fieldset>\r\n                    <hr className=\"hr-color\" />\r\n                    <div className=\"container scroll\">\r\n                        <div className=\"row\">\r\n                            {previousAddedMonsters.map((monsterObj) => (\r\n                                <div className=\"col-3 monster-card\">\r\n                                    <MonsterCard Monster={monsterObj.monsterObject} />\r\n                                    <p className=\"btn btn-danger\" onClick={() => { removeFromEncounter(monsterObj.monsterEncounterId) }} >Remove</p>\r\n                                </div>\r\n                                ))}\r\n                            {addedMonsters.map((monsterObj) => (\r\n                                <div className=\"col-3 monster-card\">\r\n                                    <MonsterCard Monster={monsterObj.Monster} />\r\n                                    <p className=\"btn btn-danger\" onClick={() => { removeMonster(monsterObj.id) }} >Remove</p>\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n                    <hr className=\"hr-color\" />\r\n                    <div className=\"container scroll\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">Favorite Monsters</div>\r\n\r\n                            {favoriteMonsters.map((monster) => (\r\n                                <div className=\"col-3 monster-card\">\r\n                                    <MonsterCard Monster={monster.monsterObject} />\r\n                                    <p className=\"btn btn-info\" onClick={() => { details(monster.monsterObject.id) }}>Details</p>\r\n                                    <p className=\"btn btn-success\" onClick={() => {\r\n                                        const monsterObj = { id: monsterId, Monster: monster.monsterObject };\r\n                                        const newId = monsterId + 1;\r\n                                        setMonsterId(newId);\r\n                                        setAddedMonsters([...addedMonsters, monsterObj])\r\n                                    }}>Add to Encounter</p>\r\n                                </div>\r\n                            ))}\r\n                            <div className=\"col-12\">All Monsters</div>\r\n                            {allMonsters.map((monster) => (\r\n                                <div className=\"col-3 monster-card\">\r\n                                    <MonsterCard Monster={monster} />\r\n                                    <p className=\"btn btn-info\" onClick={() => { details(monster.id) }}>Details</p>\r\n                                    <p className=\"btn btn-success\" onClick={() => {\r\n                                        const monsterObj = { id: monsterId, Monster: monster };\r\n                                        const newId = monsterId + 1;\r\n                                        setMonsterId(newId);\r\n                                        setAddedMonsters([...addedMonsters, monsterObj])\r\n                                    }}>Add to Encounter</p>\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n\r\n                    </div>\r\n                    <hr className=\"hr-color\" />\r\n                    <p className=\"btn btn-success\" onClick={() => { encounter.name == undefined || encounter.description == undefined ? (toast.error(\"Name or description invalid\")) : (addedMonsters.length == 0 && previousAddedMonsters.length==0 ? (toast.error(\"No Monster, please add one.\")) : (handleSubmit())) }}>Submit</p>\r\n                </form>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default EncounterEdit;",{"ruleId":"161","replacedBy":"162"},{"ruleId":"163","replacedBy":"164"},{"ruleId":"165","severity":1,"message":"166","line":1,"column":1,"nodeType":"167","messageId":"168","fix":"169"},{"ruleId":"170","severity":1,"message":"171","line":2,"column":10,"nodeType":"172","messageId":"173","endLine":2,"endColumn":16},{"ruleId":"170","severity":1,"message":"174","line":5,"column":5,"nodeType":"172","messageId":"173","endLine":5,"endColumn":17},{"ruleId":"170","severity":1,"message":"175","line":18,"column":11,"nodeType":"172","messageId":"173","endLine":18,"endColumn":19},{"ruleId":"165","severity":1,"message":"166","line":1,"column":1,"nodeType":"167","messageId":"168","fix":"176"},{"ruleId":"165","severity":1,"message":"166","line":1,"column":1,"nodeType":"167","messageId":"168","fix":"177"},{"ruleId":"165","severity":1,"message":"166","line":1,"column":1,"nodeType":"167","messageId":"168","fix":"178"},{"ruleId":"165","severity":1,"message":"166","line":1,"column":1,"nodeType":"167","messageId":"168","fix":"179"},{"ruleId":"165","severity":1,"message":"166","line":1,"column":1,"nodeType":"167","messageId":"168","fix":"180"},{"ruleId":"165","severity":1,"message":"166","line":1,"column":1,"nodeType":"167","messageId":"168","fix":"181"},{"ruleId":"182","severity":1,"message":"183","line":25,"column":8,"nodeType":"184","endLine":25,"endColumn":10,"suggestions":"185"},{"ruleId":"165","severity":1,"message":"166","line":1,"column":1,"nodeType":"167","messageId":"168","fix":"186"},{"ruleId":"187","severity":1,"message":"188","line":7,"column":13,"nodeType":"189","endLine":7,"endColumn":83},{"ruleId":"165","severity":1,"message":"166","line":1,"column":1,"nodeType":"167","messageId":"168","fix":"190"},{"ruleId":"182","severity":1,"message":"191","line":28,"column":8,"nodeType":"184","endLine":28,"endColumn":10,"suggestions":"192"},{"ruleId":"182","severity":1,"message":"193","line":32,"column":8,"nodeType":"184","endLine":32,"endColumn":24,"suggestions":"194"},{"ruleId":"195","severity":1,"message":"196","line":55,"column":33,"nodeType":"197","messageId":"168","endLine":55,"endColumn":35},{"ruleId":"198","severity":1,"message":"199","line":63,"column":27,"nodeType":"200","messageId":"201","endLine":63,"endColumn":38},{"ruleId":"202","severity":1,"message":"203","line":65,"column":48,"nodeType":"204","messageId":"205","endLine":65,"endColumn":50},{"ruleId":"206","severity":1,"message":"207","line":80,"column":25,"nodeType":"189","endLine":80,"endColumn":70},{"ruleId":"202","severity":1,"message":"208","line":150,"column":65,"nodeType":"204","messageId":"209","endLine":150,"endColumn":67},{"ruleId":"195","severity":1,"message":"196","line":151,"column":46,"nodeType":"197","messageId":"168","endLine":151,"endColumn":48},{"ruleId":"165","severity":1,"message":"166","line":1,"column":1,"nodeType":"167","messageId":"168","fix":"210"},{"ruleId":"195","severity":1,"message":"196","line":7,"column":27,"nodeType":"197","messageId":"168","endLine":7,"endColumn":29},{"ruleId":"161","replacedBy":"211"},{"ruleId":"163","replacedBy":"212"},{"ruleId":"165","severity":1,"message":"166","line":1,"column":1,"nodeType":"167","messageId":"168","fix":"213"},{"ruleId":"195","severity":1,"message":"196","line":7,"column":27,"nodeType":"197","messageId":"168","endLine":7,"endColumn":29},{"ruleId":"165","severity":1,"message":"166","line":1,"column":1,"nodeType":"167","messageId":"168","fix":"214"},{"ruleId":"182","severity":1,"message":"183","line":31,"column":8,"nodeType":"184","endLine":31,"endColumn":10,"suggestions":"215"},{"ruleId":"182","severity":1,"message":"183","line":45,"column":8,"nodeType":"184","endLine":45,"endColumn":10,"suggestions":"216"},{"ruleId":"198","severity":1,"message":"199","line":62,"column":27,"nodeType":"200","messageId":"201","endLine":62,"endColumn":38},{"ruleId":"195","severity":1,"message":"217","line":64,"column":22,"nodeType":"197","messageId":"168","endLine":64,"endColumn":24},{"ruleId":"195","severity":1,"message":"196","line":173,"column":85,"nodeType":"197","messageId":"168","endLine":173,"endColumn":87},{"ruleId":"195","severity":1,"message":"196","line":173,"column":123,"nodeType":"197","messageId":"168","endLine":173,"endColumn":125},{"ruleId":"195","severity":1,"message":"196","line":173,"column":206,"nodeType":"197","messageId":"168","endLine":173,"endColumn":208},{"ruleId":"165","severity":1,"message":"166","line":1,"column":1,"nodeType":"167","messageId":"168","fix":"218"},{"ruleId":"182","severity":1,"message":"219","line":15,"column":8,"nodeType":"184","endLine":15,"endColumn":10,"suggestions":"220"},{"ruleId":"165","severity":1,"message":"166","line":1,"column":1,"nodeType":"167","messageId":"168","fix":"221"},{"ruleId":"182","severity":1,"message":"222","line":15,"column":8,"nodeType":"184","endLine":15,"endColumn":10,"suggestions":"223"},{"ruleId":"165","severity":1,"message":"166","line":1,"column":1,"nodeType":"167","messageId":"168","fix":"224"},{"ruleId":"165","severity":1,"message":"166","line":1,"column":1,"nodeType":"167","messageId":"168","fix":"225"},{"ruleId":"182","severity":1,"message":"226","line":25,"column":8,"nodeType":"184","endLine":25,"endColumn":10,"suggestions":"227"},{"ruleId":"182","severity":1,"message":"226","line":38,"column":8,"nodeType":"184","endLine":38,"endColumn":10,"suggestions":"228"},{"ruleId":"165","severity":1,"message":"166","line":1,"column":1,"nodeType":"167","messageId":"168","fix":"229"},{"ruleId":"182","severity":1,"message":"183","line":30,"column":8,"nodeType":"184","endLine":30,"endColumn":10,"suggestions":"230"},{"ruleId":"182","severity":1,"message":"183","line":44,"column":8,"nodeType":"184","endLine":44,"endColumn":10,"suggestions":"231"},{"ruleId":"182","severity":1,"message":"226","line":55,"column":8,"nodeType":"184","endLine":55,"endColumn":10,"suggestions":"232"},{"ruleId":"182","severity":1,"message":"226","line":68,"column":8,"nodeType":"184","endLine":68,"endColumn":10,"suggestions":"233"},{"ruleId":"198","severity":1,"message":"199","line":85,"column":27,"nodeType":"200","messageId":"201","endLine":85,"endColumn":38},{"ruleId":"195","severity":1,"message":"217","line":87,"column":23,"nodeType":"197","messageId":"168","endLine":87,"endColumn":25},{"ruleId":"202","severity":1,"message":"203","line":129,"column":58,"nodeType":"204","messageId":"205","endLine":129,"endColumn":60},{"ruleId":"198","severity":1,"message":"199","line":143,"column":27,"nodeType":"200","messageId":"201","endLine":143,"endColumn":38},{"ruleId":"195","severity":1,"message":"217","line":145,"column":23,"nodeType":"197","messageId":"168","endLine":145,"endColumn":25},{"ruleId":"195","severity":1,"message":"196","line":224,"column":84,"nodeType":"197","messageId":"168","endLine":224,"endColumn":86},{"ruleId":"195","severity":1,"message":"196","line":224,"column":122,"nodeType":"197","messageId":"168","endLine":224,"endColumn":124},{"ruleId":"195","severity":1,"message":"196","line":224,"column":206,"nodeType":"197","messageId":"168","endLine":224,"endColumn":208},{"ruleId":"195","severity":1,"message":"196","line":224,"column":242,"nodeType":"197","messageId":"168","endLine":224,"endColumn":244},"no-native-reassign",["234"],"no-negated-in-lhs",["235"],"unicode-bom","Unexpected Unicode BOM (Byte Order Mark).","Program","unexpected",{"range":"236","text":"237"},"no-unused-vars","'Switch' is defined but never used.","Identifier","unusedVar","'UserProvider' is defined but never used.","'LoggedIn' is assigned a value but never used.",{"range":"238","text":"237"},{"range":"239","text":"237"},{"range":"240","text":"237"},{"range":"241","text":"237"},{"range":"242","text":"237"},{"range":"243","text":"237"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getToken'. Either include it or remove the dependency array.","ArrayExpression",["244"],{"range":"245","text":"237"},"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement",{"range":"246","text":"237"},"React Hook useEffect has missing dependencies: 'getToken' and 'monsterId'. Either include them or remove the dependency array.",["247"],"React Hook useEffect has a missing dependency: 'getAbilityTypeArray'. Either include it or remove the dependency array.",["248"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","no-array-constructor","The array literal notation [] is preferable.","NewExpression","preferLiteral","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd",{"range":"249","text":"237"},["234"],["235"],{"range":"250","text":"237"},{"range":"251","text":"237"},["252"],["253"],"Expected '!==' and instead saw '!='.",{"range":"254","text":"237"},"React Hook useEffect has a missing dependency: 'getFavorites'. Either include it or remove the dependency array.",["255"],{"range":"256","text":"237"},"React Hook useEffect has a missing dependency: 'getSavedEncounters'. Either include it or remove the dependency array.",["257"],{"range":"258","text":"237"},{"range":"259","text":"237"},"React Hook useEffect has missing dependencies: 'encounterId' and 'getToken'. Either include them or remove the dependency array.",["260"],["261"],{"range":"262","text":"237"},["263"],["264"],["265"],["266"],"no-global-assign","no-unsafe-negation",[-1,0],"",[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],{"desc":"267","fix":"268"},[-1,0],[-1,0],{"desc":"269","fix":"270"},{"desc":"271","fix":"272"},[-1,0],[-1,0],[-1,0],{"desc":"267","fix":"273"},{"desc":"267","fix":"274"},[-1,0],{"desc":"275","fix":"276"},[-1,0],{"desc":"277","fix":"278"},[-1,0],[-1,0],{"desc":"279","fix":"280"},{"desc":"279","fix":"281"},[-1,0],{"desc":"267","fix":"282"},{"desc":"267","fix":"283"},{"desc":"279","fix":"284"},{"desc":"279","fix":"285"},"Update the dependencies array to be: [getToken]",{"range":"286","text":"287"},"Update the dependencies array to be: [getToken, monsterId]",{"range":"288","text":"289"},"Update the dependencies array to be: [getAbilityTypeArray, monsterDetails]",{"range":"290","text":"291"},{"range":"292","text":"287"},{"range":"293","text":"287"},"Update the dependencies array to be: [getFavorites]",{"range":"294","text":"295"},"Update the dependencies array to be: [getSavedEncounters]",{"range":"296","text":"297"},"Update the dependencies array to be: [encounterId, getToken]",{"range":"298","text":"299"},{"range":"300","text":"299"},{"range":"301","text":"287"},{"range":"302","text":"287"},{"range":"303","text":"299"},{"range":"304","text":"299"},[844,846],"[getToken]",[1057,1059],"[getToken, monsterId]",[1126,1142],"[getAbilityTypeArray, monsterDetails]",[1125,1127],[1604,1606],[542,544],"[getFavorites]",[550,552],"[getSavedEncounters]",[951,953],"[encounterId, getToken]",[1355,1357],[1292,1294],[1771,1773],[2141,2143],[2575,2577]]